using GeometryModels.Interfaces.IModels;
using GeometryModels.Models;
using GeometryModels.Visitors.DistanceCalculators.ModelsDistanceCalculator;
using Point = GeometryModels.Point;

public class MultiLineDistanceCalculator : IModelDistanceCalculator
{
    private MultiLine _multiLine;
    private double _result;

<<<<<<< HEAD
    public MultiLineShortestLineSearcher(MultiLine multiLine) =>
        _multiLine = multiLine;
=======
	public MultiLineDistanceCalculator(MultiLine multiLine) =>
		_multiLine = multiLine;
>>>>>>> fda18903521b58f784152ee8bc45250af6231542

    public double GetResult() =>
        _result;

    public void Visit(Point point) =>
        _result = GetDistance(_multiLine, point);

    public void Visit(Line line) =>
        _result = GetDistance(_multiLine, line);

    public void Visit(Polygon polygon) =>
        _result = GetDistance(_multiLine, polygon);

    public void Visit(MultiPoint multiPoint) =>
        _result = GetDistance(_multiLine, multiPoint);

    public void Visit(MultiLine multiLine) =>
        _result = GetDistance(_multiLine, multiLine);

<<<<<<< HEAD
    public void Visit(MultiPolygon multiPolygon) =>
        _result = MultiPolygonShortestLineSearcher.GetDistance(multiPolygon, _multiLine);

    internal static double GetDistance(MultiLine multiLine, Polygon polygon) =>
         GetDistance(
             multiLine,
             polygon,
             (line, primitive) => LineShortestLineSearcher.GetDistance(line, (Polygon)primitive));

    internal static double GetDistance(MultiLine multiLine, Line line1) =>
         GetDistance(
             multiLine,
             line1,
             (line, primitive) => LineShortestLineSearcher.GetDistance(line, (Line)primitive));

    internal static double GetDistance(MultiLine multiLine, Point point) =>
         GetDistance(
             multiLine,
             point,
             (line, primitive) => LineShortestLineSearcher.GetDistance(line, (Point)primitive));

    internal static double GetDistance(MultiLine multiLine1, MultiLine multiLine2) =>
         GetDistance(
             multiLine1,
             multiLine2,
             (line, primitive) => LineShortestLineSearcher.GetDistance(line, (MultiLine)primitive));

    internal static double GetDistance(MultiLine multiLine, MultiPoint multiPoint) =>
         GetDistance(
             multiLine,
             multiPoint,
             (line, primitive) => LineShortestLineSearcher.GetDistance(line, (MultiPoint)primitive));
    internal static double GetDistance(
        MultiLine multiLine,
        IGeometryPrimitive primitive,
        Func<Line, IGeometryPrimitive, double> getDistance)
    {
        double result = 0;
        double distance;
        List<Line> lines = multiLine.GetLines();
        foreach (Line line in lines)
        {
            distance = getDistance?.Invoke(line, primitive) ?? 0;
            if (distance < result)
            {
                result = distance;
            }
        }
        return result;
    }
=======
	public void Visit(MultiPolygon multiPolygon) =>
		_result = MultiPolygonDistanceCalculator.GetDistance(multiPolygon, _multiLine);

	internal static double GetDistance(MultiLine multiLine, Polygon polygon) =>
		 GetDistance(
			 multiLine,
			 polygon,
			 (line, primitive) => LineDistanceCalculator.GetDistance(line, (Polygon)primitive));

	internal static double GetDistance(MultiLine multiLine, Line line1) =>
		 GetDistance(
			 multiLine,
			 line1,
			 (line, primitive) => LineDistanceCalculator.GetDistance(line, (Line)primitive));

	internal static double GetDistance(MultiLine multiLine, Point point) =>
		 GetDistance(
			 multiLine,
			 point,
			 (line, primitive) => LineDistanceCalculator.GetDistance(line, (Point)primitive));

	internal static double GetDistance(MultiLine multiLine1, MultiLine multiLine2) =>
		 GetDistance(
			 multiLine1,
			 multiLine2,
			 (line, primitive) => LineDistanceCalculator.GetDistance(line, (MultiLine)primitive));

	internal static double GetDistance(MultiLine multiLine, MultiPoint multiPoint) =>
		 GetDistance(
			 multiLine,
			 multiPoint,
			 (line, primitive) => LineDistanceCalculator.GetDistance(line, (MultiPoint)primitive));
	internal static double GetDistance(
		MultiLine multiLine,
		IGeometryPrimitive primitive,
		Func<Line, IGeometryPrimitive, double> getDistance)
	{
		double result = 0;
		double distance;
		List<Line> lines = multiLine.GetLines();
		foreach (Line line in lines)
		{
			distance = getDistance?.Invoke(line, primitive) ?? 0;
			if (distance < result)
			{
				result = distance;
			}
		}
		return result;
	}
>>>>>>> fda18903521b58f784152ee8bc45250af6231542

    public void Visit(Contour contour) =>
        throw new NotImplementedException();
}